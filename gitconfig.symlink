#
# ini for git
#

[user]
    name = "Jesse McGinnis"
    email = "jesse@jcmcginnis.com"
    logallrefupdates = true

[advice]
    statusHints = true

[apply]
    whitespace = strip

[branch]
    autosetupmerge = true
    autosetuprebase = always

[color]
    ui = true

[diff]
    renames = true

[core]
    editor = vim
    excludesfile = ~/.gitignore_global
    autocrlf = input

[merge]
    tool = vimdiff

[gc]
    reflogexpire = 300
    reflogexpireunreachable = 90

[push]
    default = tracking

[rebase]
    stat = true

[rerere]
    enabled = true
    autoupdate = true

[alias]
    alias = !sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

    last = cat-file commit HEAD
    cat = -p cat-file -p

    deploy = "!f() { br=${2:-master}; git push $1 `git subtree split --prefix build $br`:$br --force ; } ; f"

    ghmerge = "!f() { if [ -z "$1" ]; then echo "branch must be provided"; exit 1; fi; git co $1 && git pull origin $1 && git co master && git pull origin master && git merge $1 && git push origin master && git push origin :$1 && git br -d $1; } ; f"
    done = "!f() { br=${1:-master}; cur_br=`git symbolic-ref --short HEAD`; git co $br && git pull && git br -d $cur_br && git tidy; }; f"

    stat = status
    sst = "!f() { git ls-files --exclude-standard -t -u -s -m -d $@ | sed -e 's/C.*\t/C /' ; } ; f"
    st = !git sst -o

    unstash = stash apply

    pushf = push --force-with-lease

    df = diff
    ds = diff --stat -r
    cds = !git ds --cached
    changes = "!git diff --name-status | sed -e 's/^/W /' ; git diff --cached --name-status | sed -e 's/^/C /'"

    kill = branch -d

    ci = commit
    cia = commit -a
    do = commit -am

    co = checkout

    cp = cherry-pick

    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    lgn = "!f() { git log --graph --pretty=format:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative $@ | git name-rev --stdin --name-only ; } ; f"
    log1 = log --pretty=oneline --abbrev-commit --decorate
    standup = log --pretty=oneline --abbrev-commit --decorate --since yesterday --author Jesse

    br = branch

    undo = reset --hard
    amend = commit --amend -C HEAD

    prune-all = !git remote | xargs -n 1 git remote prune
    tidy = "!f() { git gc; git prune; git prune-all; }; f"

    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

    debug = !GIT_PAGER= gdb --args git
    edit-last-commit = !vim `git diff-tree -r --name-only HEAD HEAD~1`
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

    k = !gitk


[credential]
	helper = osxkeychain

[hub]
protocol = https
[github]
	user = elsom25
